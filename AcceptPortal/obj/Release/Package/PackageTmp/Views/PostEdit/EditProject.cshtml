@model AcceptPortal.ViewModels.ProjectVM


@{
    ViewBag.Title = AcceptPortal.Resources.Global.EditPostEditProjectLabel;
}

<h2>@AcceptPortal.Resources.Global.EditPostEditProjectLabel</h2>

<style type="text/css">   
       
    table
    {
       text-align:left;
       width:100%;
       border: 0px none;
       /*border-bottom: 1px solid;*/
       /*border-top: 1px solid;*/
    }
     
    label
    {
        display:inline;
        margin-bottom:0px;
        font-size:16px;
    }
    
    input
    {
       width: 100%;            
        text-align:left;
        min-height:25px;
    }
   
    select
    {
        width: 100%;       
        text-align:left;   
         font-size:14px;         
    }
    form
    {
        margin: 0 0 0px;
    }
</style>


<p style="font-size:10px;color:black;">@AcceptPortal.Resources.Global.EditProjectRestrictionsLabel</p>

<div @*style="text-align:center;" class="center"*@>

@*@using (Html.BeginForm(new { projectId = Model.Project.ID }))*@
@using (Html.BeginForm("EditProject", "PostEdit", FormMethod.Post, new RouteValueDictionary(new { @id = "editProjectForm" })))
{
    @Html.ValidationSummary(true)
    
    <table border=0>
    <tr>
        <td width="200"><b>@Html.LabelFor(model => model.Project.ProjectName):</b></td>
        <td width="200">
          @Html.EditorFor(model => model.Project.ProjectName)
            @Html.ValidationMessageFor(model => model.Project.ProjectName)
        </td>
    </tr>
    <tr>
    <td><b>@Html.LabelFor(model => model.Project.Organization):</b></td>
    <td>
             @Html.EditorFor(model => model.Project.Organization)
            @Html.ValidationMessageFor(model => model.Project.Organization)
   </td>
    </tr>    
    <tr>
    <td><b>@Html.LabelFor(model => model.Project.ProjectDomain): **</b></td>
    <td>
               @Html.DropDownListFor(model => model.Project.ProjectDomain, new SelectList(Model.DomainsList, "ID", "DomainName", Model.Project.ProjectDomain), new {  @style = "height:25px;" })        

   </td>
    </tr>    
    <tr>
        <td><b>@Html.LabelFor(model => model.Project.SourceLangId): **</b></td>
       <td>
               @Html.DropDownListFor(model => model.Project.SourceLangId, new SelectList(Model.SourceLanguageList, "ID", "Name", Model.Project.SourceLangId), new { @Id = "srcLang",  @style = "height:25px;" })
       </td>
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.TargetLangId): **</b></td>
       <td>
          @Html.DropDownListFor(model => model.Project.TargetLangId, new SelectList(Model.TargetLanguageList, "ID", "Name", Model.Project.TargetLangId), new { @Id = "tgtLang", @style = "height:25px;" })             
       </td>
    </tr>

    @if (!Model.IsProjectStarted)
    {    
                    
    <tr>
        <td><b>@Html.LabelFor(model => model.Project.InterfaceConfigurationId): *</b></td>
       <td>
          @Html.DropDownListFor(model => model.Project.InterfaceConfigurationId, new SelectList(Model.ConfigurationList, "ID", "Name", Model.Project.InterfaceConfigurationId), new { @style = "height:25px;" })      
       </td>
    </tr>
        
         <tr>
        <td><b>@Html.LabelFor(model => model.Project.CustomInterfaceConfiguration):</b></td>
       <td>
          @Html.DropDownListFor(model => model.Project.CustomInterfaceConfiguration, new SelectList(Model.CustomInterfaceConfigurationOptions, "ID", "Label", Model.Project.CustomInterfaceConfiguration), new { @style = "height:25px;" })      
       </td>
    </tr>
        
        <tr>
     <td><b>@Html.LabelFor(model => model.Project.External):</b></td>
       <td>
        @if (Model.Project.External)
        {
             @Html.HiddenFor(x => x.Project.External)
          @Html.CheckBoxFor(model => model.Project.External, new { @style = "height:25px;min-width:300px;width:100%;", @checked = "checked", @disabled = "disabled" })      
        }
        else
        { 
             @Html.HiddenFor(x => x.Project.External)
            @Html.CheckBoxFor(model => model.Project.External, new {@style = "height:25px;min-width:300px;width:100%;", @checked = "", @disabled = "disabled" })      
        }
                   </td>
    </tr>
        
                              
    <tr>
    <td><b>@Html.LabelFor(model => model.Project.SingleRevision):</b></td>
    <td>
     @if (Model.Project.SingleRevision)
     {
        @Html.CheckBoxFor(model => model.Project.SingleRevision, new {@style = "height:25px;min-width:300px;width:100%;", @checked = "checked", @id = "chkSingleRevision" })                                              
     }
     else
     { 
      @Html.CheckBoxFor(model => model.Project.SingleRevision, new {@style = "height:25px;min-width:300px;width:100%;", @checked = "", @id = "chkSingleRevision" })                                              
     }
    </td>     
    </tr>

    <tr>
    <td><b>@Html.LabelFor(model => model.Project.MaxThreshold):</b></td>
    <td>
     @if (Model.Project.SingleRevision)
     {
        @Html.TextBox("Project.MaxThreshold", Model.Project.MaxThreshold, new {  @style = "height:25px;", @id = "inputMaxThreshold" })             
     }
     else
     { 
        @Html.TextBox("Project.MaxThreshold", Model.Project.MaxThreshold, new { @style = "height:25px;", @id = "inputMaxThreshold" })             
     }
    </td>
    </tr>
                                            
    <tr>
        <td><b>@Html.LabelFor(model => model.Project.DisplayTranslationOptions): *</b></td>
       <td>
           @Html.DropDownListFor(model => model.Project.DisplayTranslationOptions, new SelectList(Model.UseTranslationOptions, "ID", "Label", Model.Project.DisplayTranslationOptions), new { @style = "height:25px;" })
       </td>
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.ProjectOptions): *</b></td>
       <td>
        
        
        <div class="space">
            @Html.TextBox("txtOptions") <label id="addOptionLabel" class="space" style="cursor:pointer;">[+]</label> <label id="removeOptionLabel" class="space" style="cursor:pointer;">[-]</label>
        </div>

        <div class="space">            
            <select multiple="multiple" id="optionsList" style="height:100px;"></select>        
        </div>
          @Html.HiddenFor(model => model.AllOptions, new { @id = "hddListOptions" })
       </td>
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.ProjQuestion): *</b></td>
       <td>

        @Html.EditorFor(model => model.Project.ProjQuestion)
            @Html.ValidationMessageFor(model => model.Project.ProjQuestion)      
       </td>
    </tr>
        
    }
    else
    { 
        <tr>
        <td><b>@Html.LabelFor(model => model.Project.InterfaceConfigurationId): *</b></td>
       <td>
               @Html.DropDownListFor(model => model.Project.InterfaceConfigurationId, new SelectList(Model.ConfigurationList, "ID", "Name", Model.Project.InterfaceConfigurationId), new { @style = "height:25px;" })      
       </td>
        </tr>

        <tr>
        <td><b>@Html.LabelFor(model => model.Project.CustomInterfaceConfiguration):</b></td>
       <td>
          @Html.DropDownListFor(model => model.Project.CustomInterfaceConfiguration, new SelectList(Model.CustomInterfaceConfigurationOptions, "ID", "Label", Model.Project.CustomInterfaceConfiguration), new { @style = "height:25px;" })      
       </td>
    </tr>
        
        <tr>
     <td><b>@Html.LabelFor(model => model.Project.External):</b></td>
       <td>
        
        @if (Model.Project.External)
        {
             @Html.HiddenFor(x => x.Project.External)
          @Html.CheckBoxFor(model => model.Project.External, new {  @style = "min-width:300px;width:100%;height:25px;", @disabled = "disabled", @checked = "checked" })      
        }
        else
        { 
         @Html.HiddenFor(x => x.Project.External)
         @Html.CheckBoxFor(model => model.Project.External, new {  @style = "min-width:300px;width:100%;height:25px;", @disabled = "disabled" })      
        }
        

       </td>
    </tr>

        <tr>
    <td><b>@Html.LabelFor(model => model.Project.SingleRevision):</b></td>
    <td>
     @if (Model.Project.SingleRevision)
     {
          @Html.HiddenFor(x => x.Project.SingleRevision)
        @Html.CheckBoxFor(model => model.Project.SingleRevision, new {  @style = "min-width:300px;width:100%;height:25px;", @checked = "checked", @id = "chkSingleRevision", @disabled = "disabled" })                                              
     }
     else
     { 
          @Html.HiddenFor(x => x.Project.SingleRevision)
      @Html.CheckBoxFor(model => model.Project.SingleRevision, new {  @style = "min-width:300px;width:100%;height:25px;", @checked = "", @id = "chkSingleRevision", @disabled = "disabled" })                                              
     }
    </td>     
    </tr>

    <tr>
    <td><b>@Html.LabelFor(model => model.Project.MaxThreshold):</b></td>
    <td>
     @if (Model.Project.SingleRevision)
     {
        @Html.TextBox("Project.MaxThreshold", Model.Project.MaxThreshold, new {  @style = "height:25px;", @id = "inputMaxThreshold", @disabled = "disabled" })             
     }
     else
     { 
        @Html.TextBox("Project.MaxThreshold", Model.Project.MaxThreshold, new {  @style = "height:25px;", @id = "inputMaxThreshold", @disabled = "disabled" })             
     }
    </td>
    </tr>
        
        
        
     <tr>
        <td><b>@Html.LabelFor(model => model.Project.DisplayTranslationOptions): *</b></td>
       <td>
           @Html.DropDownListFor(model => model.Project.DisplayTranslationOptions, new SelectList(Model.UseTranslationOptions, "ID", "Label", Model.Project.DisplayTranslationOptions), new {  @style = "height:25px;" })
       </td>
        </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.ProjectOptions): *</b></td>
       <td>
        
        
        <div class="space">
            @Html.TextBox("txtOptions", string.Empty, new { @readonly = "readonly" }) 
        </div>

        <div class="space">            
            <select multiple="multiple" id="optionsList" style="height:100px;"></select>        
        </div>
          @Html.HiddenFor(model => model.AllOptions, new { @id = "hddListOptions" })
       </td>
        </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.ProjQuestion): *</b></td>
       <td>
       @Html.TextBoxFor(model => model.Project.ProjQuestion, new { @readonly = "readonly" })

     
            @Html.ValidationMessageFor(model => model.Project.ProjQuestion)      
       </td>
        </tr>
    
            
    }
    

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.EmailInvitationBodyText):</b></td>
       <td>
            @Html.EditorFor(model => model.Project.EmailInvitationBodyText)
            @Html.ValidationMessageFor(model => model.Project.EmailInvitationBodyText)
       </td>
    </tr>
    
     <tr>
        <td><b>@Html.LabelFor(model => model.Project.ProjectSurvey):</b></td>
       <td>
              @Html.EditorFor(model => model.Project.ProjectSurvey)
            @Html.ValidationMessageFor(model => model.Project.ProjectSurvey)
       </td>
    </tr>


    <tr style="display:none">
        <td colspan="2">
              <input id="submitProjectUpdate" style="display:none" type="submit" value="" />
        </td>
    </tr>
</table>    
}
    </div>


<div style="margin:0px;float:left;padding:0px;">
    @Html.ActionLink(@AcceptPortal.Resources.Global.PostEditBackToListLabel, "Index") <input id="btnUpdateProject" class="btn btn-primary" type="button" value="@AcceptPortal.Resources.Global.UpdatePostEditProjectLabel"  />    
</div>




@section scripts{

<script type="text/javascript">
    $(document).ready(function () {
        $("#divGlobalHeaderMargin").css("margin-top", "20px");
    debugger;
    var displayTranslationOptions = @Html.Raw(Json.Encode(Model.Project.DisplayTranslationOptions));
    var ddlOptions = @Html.Raw(Json.Encode(Model.Project.ProjectOptions));
    var uiConfiguration = @Html.Raw(Json.Encode(Model.Project.InterfaceConfigurationId));

    var customUIConfiguration = @Html.Raw(Json.Encode(Model.Project.CustomInterfaceConfiguration))
            
       $("#hddListOptions").val("_$#$_");

      if(displayTranslationOptions.ID == 2)
       $('#Project_DisplayTranslationOptions>option:nth-child(2)').attr('selected', true); 

      if(uiConfiguration == 2)
       $('#Project_InterfaceConfigurationId>option:nth-child(2)').attr('selected', true); 

      if(customUIConfiguration == 1)
       $('#Project_CustomInterfaceConfiguration>option:nth-child(2)').attr('selected', true); 


       for(var i = 0; i<ddlOptions.length; i++)
       {
            debugger;
          $("#optionsList").append('<option>' +  ddlOptions[i].Option + '</option>');
          var currentList = $("#hddListOptions").val();
          $("#hddListOptions").val(currentList + "_$#$_" + ddlOptions[i].Option);              
       }
        

      $("#addOptionLabel").click(function () {   
            debugger;
            if ($.trim($("#txtOptions").val())) {
                var count = $("#optionsList option").length;
                if ($("#optionsList option").length <= 8) {
                    $("#optionsList").append('<option>' + $("#txtOptions").val() + '</option>');
                    var currentList = $("#hddListOptions").val();
                    $("#hddListOptions").val(currentList + "_$#$_" + $("#txtOptions").val());
                    $("#txtOptions").val("");
                }
            }
        });

        $("#removeOptionLabel").click(function () {
        debugger;
            if ($("#optionsList option").length > 0) {
                
                   var currentList = $("#hddListOptions").val();
                   currentList = currentList.replace($("#optionsList option:last").val(),"");
                   $("#hddListOptions").val(currentList);
                
                   $("#optionsList option:last").remove();
                   //option:last-child
            }
        });

       
        
        $("#btnUpdateProject").click(function () {
            debugger;
            var labelOthers =  @Html.Raw(Json.Encode(@AcceptPortal.Resources.Global.OtherLanguage));
            
            //if ($("#srcLang option:selected").val().toString() === $("#tgtLang option:selected").val().toString() && $("#srcLang option:selected").val().toString() !== labelOthers &&  $("#tgtLang option:selected").val().toString() !== labelOthers)
            if ($("#srcLang option:selected").text() === $("#tgtLang option:selected").text() && $("#srcLang option:selected").text() !== labelOthers &&  $("#tgtLang option:selected").text() !== labelOthers)
            {
                 var message =  @Html.Raw(Json.Encode(@AcceptPortal.Resources.Global.PostEditSourceAndTargetLanguagesMustBeTheSame));
                 alert(message);
            }
            else
            {
                $("#editProjectForm").submit();            
            }

        });

        if($("#Project_External").attr('checked') == true){
                 $('#Project_EmailInvitationBodyText').attr('disabled', 'disabled');
                   $('#Project_ProjectSurvey').attr('disabled', 'disabled');    
         }




     // $('#inputMaxThreshold').attr('disabled', 'disabled');    

      $("#chkSingleRevision").click(function () {
        if(this.checked)
               {
                $('#inputMaxThreshold').removeAttr('disabled');
               }
               else
               {                                                                           
                $('#inputMaxThreshold').attr('disabled', 'disabled');                                                                                       
               }
      
      });



    });
</script>
    }
