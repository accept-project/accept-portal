@model AcceptPortal.ViewModels.ProjectVM

@{
    ViewBag.Title = AcceptPortal.Resources.Global.PostEditCreateProjectTitle;
}


<style type="text/css">
    
    table
    {
       text-align:left;
       width:100%;
       border: 0px none;
       /*border-bottom: 1px solid;*/
       /*border-top: 1px solid;*/
    }
     
    label
    {
        display:inline;
        margin-bottom:0px;
        font-size:16px;
    }
    
    input
    {
       width: 100%;            
        text-align:left;
         font-size:16px;
    }
   
    select
    {
        width: 100%;       
        text-align:left;    
         font-size:14px;    
    }
    form
    {
        margin: 0 0 0px;
    }

    
</style>


@*sig admin is only used here, does it make sense yet?*@
@if ((User.IsInRole("Admin") || User.IsInRole("SIGAdmin"))) 
{
<h2>@AcceptPortal.Resources.Global.PostEditCreateProjectTitle</h2>
<div style="text-align:left;margin:0px;padding:0px;" class="">



@using (Html.BeginForm("CreateProject", "PostEdit", FormMethod.Post, new RouteValueDictionary(new { @id = "createProjectForm" })))
{                  
    
    @Html.ValidationSummary(true)
    
    <table border=0>
    <tr>
        <td width="200"><b>@Html.LabelFor(model => model.Project.ProjectName):</b></td>
        <td width="200">
            @Html.EditorFor(model => model.Project.ProjectName)
            @Html.ValidationMessageFor(model => model.Project.ProjectName)
        </td>
    </tr>
    <tr>
    <td><b>@Html.LabelFor(model => model.Project.Organization):</b></td>
    <td>
            @Html.EditorFor(model => model.Project.Organization)
            @Html.ValidationMessageFor(model => model.Project.Organization)
   </td>
    </tr>    
    <tr>
    <td><b>@Html.LabelFor(model => model.Project.ProjectDomain):</b></td>
    <td>
               @Html.DropDownListFor(model => model.Project.ProjectDomain, new SelectList(Model.DomainsList, "ID", "DomainName", Model.Project.ProjectDomain), new {@style = "height:25px;" })        

   </td>
    </tr>    
    <tr>
        <td><b>@Html.LabelFor(model => model.Project.SourceLangId):</b></td>
       <td>
               @Html.DropDownListFor(model => model.Project.SourceLangId, new SelectList(Model.SourceLanguageList, "ID", "Name", Model.Project.SourceLangId), new { @Id = "srcLang", @style = "height:25px;" })
       </td>
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.TargetLangId):</b></td>
       <td>
          @Html.DropDownListFor(model => model.Project.TargetLangId, new SelectList(Model.TargetLanguageList, "ID", "Name", Model.Project.TargetLangId), new { @Id = "tgtLang", @style = "height:25px;" })             
       </td>
    </tr>


    <tr>
        <td><b>@Html.LabelFor(model => model.Project.InterfaceConfigurationId):</b></td>
       <td>
          @Html.DropDownListFor(model => model.Project.InterfaceConfigurationId, new SelectList(Model.ConfigurationList, "ID", "Name", Model.Project.InterfaceConfigurationId), new { @style = "height:25px;" })      
       </td>
    </tr>




     <tr>
        <td><b>@Html.LabelFor(model => model.Project.CustomInterfaceConfiguration):</b></td>
       <td>
          @Html.DropDownListFor(model => model.Project.CustomInterfaceConfiguration, new SelectList(Model.CustomInterfaceConfigurationOptions, "ID", "Label", Model.Project.CustomInterfaceConfiguration), new { @style = "height:25px;" })      
       </td>
    </tr>

    <tr>
        <td><b>@Html.LabelFor(model => model.Project.External):</b></td>
       <td>
          @Html.CheckBoxFor(model => model.Project.External, new { @style = "height:25px;min-width:300px;width:100%;", @checked="" })      
       </td>
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.SingleRevision):</b></td>
       <td>
          @Html.CheckBoxFor(model => model.Project.SingleRevision, new { @style = "height:25px;min-width:300px;width:100%;", @checked = "", @id="chkSingleRevision" }) 
          
          
          
               
       </td>
     
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.MaxThreshold):</b></td>
       <td>

       @Html.TextBox("Project.MaxThreshold", Model.Project.MaxThreshold, new { @style = "height:25px;", @id = "inputMaxThreshold" })
             
       </td>
    </tr>
    



    <tr>
        <td><b>@Html.LabelFor(model => model.Project.DisplayTranslationOptions):</b></td>
       <td width="400">
           @Html.DropDownListFor(model => model.Project.DisplayTranslationOptions, new SelectList(Model.UseTranslationOptions, "ID", "Label", Model.Project.DisplayTranslationOptions), new {@style = "height:25px;" })
       </td>
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.ProjectOptions):</b></td>
       <td>
        
        
        <div class="space">
            @Html.TextBox("txtOptions") <label id="addOptionLabel" class="space" style="cursor:pointer;">[+]</label> <label id="removeOptionLabel" class="space" style="cursor:pointer;">[-]</label>
        </div>

        <div class="space">            
            <select multiple="multiple" id="optionsList" style="height:100px;"></select>        
        </div>
          @Html.HiddenFor(model => model.AllOptions, new { @id = "hddListOptions" })
       </td>
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.ProjQuestion):</b></td>
       <td>

        @Html.EditorFor(model => model.Project.ProjQuestion)
            @Html.ValidationMessageFor(model => model.Project.ProjQuestion)

       @*
         <div class="space">
            @Html.TextBox("txtQuestions") <label id="addQuestionLabel" class="space" style="cursor:pointer;">[+]</label> <label id="removeQuestionLabel" class="space" style="cursor:pointer;">[-]</label>
        </div>
        <div class="space">       
          <select multiple="multiple" id="questionsList" style="height:100px;"></select>
        </div>        
            @Html.HiddenFor(model => model.AllQuestions, new { @id = "hddListQuestions" })   *@     
       </td>
    </tr>

     <tr>
        <td><b>@Html.LabelFor(model => model.Project.EmailInvitationBodyText):</b></td>
       <td>
            @Html.EditorFor(model => model.Project.EmailInvitationBodyText)
            @Html.ValidationMessageFor(model => model.Project.EmailInvitationBodyText)
       </td>
    </tr>
    
     <tr>
        <td><b>@Html.LabelFor(model => model.Project.ProjectSurvey):</b></td>
       <td>
              @Html.EditorFor(model => model.Project.ProjectSurvey)
            @Html.ValidationMessageFor(model => model.Project.ProjectSurvey)
       </td>
    </tr>


    <tr style="display:none">
        <td colspan="2">
              <input id="submitProjectCreation" style="display:none" type="submit" value="Create" />
        </td>
    </tr>
</table>    
                    
}
 </div>


<div style="margin:0px;float:left;padding:0px;">
    @Html.ActionLink(@AcceptPortal.Resources.Global.PostEditBackToListLabel, "Index") <input id="btnCreateProject" class="btn btn-primary" type="button" value="@AcceptPortal.Resources.Global.PostEditCreateProjectLabel"  />    
</div>

@section scripts{
    
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script type="text/javascript">

    $(document).ready(function () {
        $("#divGlobalHeaderMargin").css("margin-top", "30px");

     $('#inputMaxThreshold').attr('disabled', 'disabled');    

      $("#chkSingleRevision").click(function () {
        if(this.checked)
               {
                $('#inputMaxThreshold').removeAttr('disabled');
               }
               else
               {                                                                           
                $('#inputMaxThreshold').attr('disabled', 'disabled');                                                                                       
               }
      
      });


        $("#addOptionLabel").click(function () {
            //            if (!$.trim($("#myTextArea").val())) {
            //                // textarea is empty or contains only white-space
            //            }
            debugger;
            if ($.trim($("#txtOptions").val())) {
                var count = $("#optionsList option").length;
                if ($("#optionsList option").length <= 8) {
                    $("#optionsList").append('<option>' + $("#txtOptions").val() + '</option>');
                    var currentList = $("#hddListOptions").val();
                    $("#hddListOptions").val(currentList + "_$#$_" + $("#txtOptions").val());
                    $("#txtOptions").val("");
                }
            }
        });

//        $("#addQuestionLabel").click(function () {
//            //            if (!$.trim($("#myTextArea").val())) {
//            //                // textarea is empty or contains only white-space
//            //            }
//            debugger;
//            if ($.trim($("#txtQuestions").val())) {
//                var count = $("#questionsList option").length;
//                if ($("#questionsList option").length <= 8) {
//                    $("#questionsList").append('<option>' + $("#txtQuestions").val() + '</option>');
//                    var currentList = $("#hddListQuestions").val();
//                    $("#hddListQuestions").val(currentList + "_$#$_" + $("#txtQuestions").val());
//                    $("#txtQuestions").val("");
//                }
//            }
//        });

        $("#removeOptionLabel").click(function () {
            if ($("#optionsList option").length > 0) {

                   var currentList = $("#hddListOptions").val();
                   currentList = currentList.replace($("#optionsList option:last").val(),"");
                   $("#hddListOptions").val(currentList);


                $("#optionsList option:last").remove();
                //option:last-child
            }
        });
//        $("#removeQuestionLabel").click(function () {
//            if ($("#questionsList option").length > 0) {
//                $("#questionsList option:last").remove();
//                //option:last-child
//            }
//        });


        $("#hddListOptions").val("_$#$_");
//      $("#hddListQuestions").val("_$#$_");


        $("#btnCreateProject").click(function () {
            debugger;
            var labelOthers =  @Html.Raw(Json.Encode(@AcceptPortal.Resources.Global.OtherLanguage));
            
            if ($("#srcLang option:selected").text() === $("#tgtLang option:selected").text() && $("#srcLang option:selected").text() !== labelOthers &&  $("#tgtLang option:selected").text() !== labelOthers)
            {
                var message =  @Html.Raw(Json.Encode(@AcceptPortal.Resources.Global.PostEditSourceAndTargetLanguagesMustBeTheSame));
                alert(message);
            }
            else 
                $("#createProjectForm").submit();                        
        });
        
            $("#Project_External").click(function(){
                             
            if(this.checked)
            {
                // To enable 
                // OR you can set attr to "" 
                $('#Project_EmailInvitationBodyText').attr('disabled', 'disabled');
                $('#Project_ProjectSurvey').attr('disabled', 'disabled');    
            }
            else
            {                                                        
                $('#Project_EmailInvitationBodyText').removeAttr('disabled');
                $('#Project_ProjectSurvey').removeAttr('disabled');                                                                                             
            }

            });


    });

</script>
    }
    
}else
{
    <div style="text-align:center;vertical-align:middle;margin-top:15%;" class="center"><img src="@Url.Content("~/Content/images/no-permission.jpg")" alt="" /></div>
}